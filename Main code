import os
import pyodbc
from tabulate import tabulate

SERVER = '192.168.0.254'
DATABASE = 'BDDEMO'
USERNAME = 'microuni'
PASSWORD = 'microuni'

while True:

    os.system('cls' if os.name == 'nt' else 'clear')  # Limpa a tela, elimina resultados da ultima consulta

    print()
    print(" -----------------------------------------------")
    print(" --------- REMARCAÇÃO DE PREÇOS DE NF ----------")
    print(" -----------------------------------------------")
    print()

    numnota = input(" Digite o Nº da NF: ")

    conn = pyodbc.connect('DRIVER={SQL Server};SERVER='+SERVER+';DATABASE='+DATABASE+';UID='+USERNAME+';PWD='+PASSWORD)

    cursor = conn.cursor()

    cursor.execute("""
        WITH calculateddata AS (

        SELECT
            convert(varchar, b.Dtultrea, 3) 'REM',
            convert(varchar, b.DtUltComp, 3) 'ENT',
            a.codpro COD,
            b.descr DESCRICAO,
            FORMAT(a.quant, '0.00') QUAN,
            a.unidade UND ,
            FORMAT(a.preco, '0.00') RS_LISTA,
            FORMAT(b.precocomp, '0.00') RS_CUSTO, -- FORMAT(a.custven, '0.00')
            FORMAT(b.precoven, '0.00') RS_VEN_REAL,

            CASE
                WHEN b.margemluc=0 THEN 0 
                ELSE CAST(((b.margemluc/(100-b.margemluc))*100) AS DECIMAL(7,1)) 
            END AS "MKP",

            CASE
                WHEN b.precocomp=0 THEN 0
                ELSE CAST(((b.precoven-b.precocomp)/b.precocomp)*100 AS DECIMAL(7,1))
            END AS MKP_REAL,

            FORMAT((a.valsubstri)/a.quant, '0.00') ST,
            FORMAT(a.valoripi/a.quant, '0.00') IPI,
            FORMAT(a.baseicms, '0.0') B_ICMS,
            FORMAT(a.faconv, '0.00') CONVER,

            CASE 
                WHEN b.cm=60 THEN 'SUBSTITUIÇÃO'
                WHEN b.cm=00 THEN 'TRIBUTADO'
                WHEN b.cm=40 THEN 'ISENTO'
                WHEN b.cm=20 THEN 'BASE REDUZIDA'
                WHEN b.cm=70 THEN 'ST BASE REDUZ.'
                ELSE b.cm
            END TRIBUTACAO

        FROM
            ITNFENTCAD a,
            produtocad b,
            complementoproduto c

        WHERE
            a.codpro = b.codpro AND
            b.codpro = c.codpro AND
            a.numnota = ?

        )

        SELECT
            [ENT],
            [REM],
            [COD],
            [DESCRICAO],
            [QUAN],
            [UND],
            [RS_LISTA],
            [RS_CUSTO],
            FORMAT([RS_CUSTO] * (1+([MKP]/100)), '0.00') AS [RS_VENDA_SUG],
            [RS_VEN_REAL],
            [MKP_REAL],
            [MKP],
            [MKP_REAL] - [MKP] AS [DIF_MKP],
            [ST],
            [CONVER]

        FROM 
            calculateddata

        /*WHERE
            [MKP_REAL] - [MKP] > 0.5 or [MKP_REAL] - [MKP] < -0.5*/

        ORDER BY
            [RS_CUSTO]
        """, (numnota,)
    )

    records = cursor.fetchall()
    if len(records) == 0:
        print()
        print(" NF não localizada")
    else:
        headers = ["  Entra", "  Remar", "Cod ", "      Descrição", "Und", " Lista ", "ST ", " Custo ", " Sugerido ", " Atual ","MKP Cad ", "MKP Real ", "Dif MKP ", "#", "Conv"]
        table = [[r.ENT, r.REM, r.COD, r.DESCRICAO, r.UND, r.RS_LISTA, r.ST, r.RS_CUSTO, r.RS_VENDA_SUG, r.RS_VEN_REAL,r.MKP, r.MKP_REAL, r.DIF_MKP, i + 1, r.CONVER] for i, r in enumerate(records)]

        print()
        #print(tabulate(table, headers=headers, tablefmt="fancy_grid"))
        print(tabulate(table, headers=headers, tablefmt="fancy_grid"))
    print()

    quer_remarcar = input(" Deseja remarcar a NF? (s/n): ")
    print() # espaçamento
    if quer_remarcar.lower() == 's':
        remarcar_todos = input(" Deseja remarcar TODOS os itens? (s/n): ")
        print() #espaçamento
        if remarcar_todos.lower() == 's':
            codigos = [str(r.COD) for r in records]
            print("Remarcando todos os itens. Códigos:", ", ".join(codigos))  # Exibe todos os valores da coluna r.COD
           
            # update de todas as linhas   
                  
            for r in records:
                codigo = r.COD  # Pega o código do produto
                valor_venda_sug = r.RS_VENDA_SUG  # Pega o valor sugerido de venda
                query = f"""
                    UPDATE 
                        produtocad
                    SET 
                        precoven = {valor_venda_sug}
                    WHERE
                        codpro = {codigo}
                """   
                cursor.execute(query) # Executa a query para cada código

            conn.commit() # Confirma as alterações

            print("Os preços de venda foram atualizados para todos os códigos.")

            continuar = input(" Deseja remarcar outra NF? (s/n): ")
            if continuar.lower() != 'n':
                continue # retorna ao inicio do loop

        else:
            num_linhas = input(" Digite os Nºs das linhas: ").split(",")
            print() #espaçamento
            num_linhas = [int(x.strip()) for x in num_linhas if x.strip().isdigit()]  # Converte o nº das linhas para inteiro para acessar o records
            codigos_selecionados = [str(records[i-1].COD) for i in num_linhas if i > 0 and i <= len(records)] # Filtra as linhas, deixando apenas as inseridas
            
            # update das linhas selecionadas
            
            for i, codigo in enumerate(codigos_selecionados):
                valor_venda_sug = records[i].RS_VENDA_SUG  # Pega o valor de RS_VENDA_SUG da respectiva linha em records
                query = f"""
                    UPDATE 
                        produtocad
                    SET 
                        precoven = {valor_venda_sug}
                    WHERE
                        codpro = {codigo}
                """ 
                cursor.execute(query) # Executa a query de update para cada código

            conn.commit() # Confirma as alterações

            print(f"Preços atualizados para os códigos: {', '.join(codigos_selecionados)}")


        continuar = input(" Deseja remarcar outra NF? (s/n): ")
        if continuar.lower() != 'n':
            continue # retorna ao inicio do loop
        
    else:
        print("Nenhum item será remarcado. Próxima NF.")

#conn.close() # ecerra conexão com o bd